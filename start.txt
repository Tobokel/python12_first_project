1. Создаем директорию проекта
2. Создаем виртуальное окружение
3. Создаем файл requirements.txt, куда указываем используемые библиотеки
4. Устанавливаем библиотеки при помощи pip3 install -r requirements.txt
5. В pycharm открываем найстройки: File -> Settings -> Project -> Python Interpreter и выбираем версию Python из моего окружения
6. Проверить, что окружение активировано в терминале Pycharm
7. Создаем Django проект: django-admin startproject название_проекта .
8. Создание нужные приложения: python3 manage.py startapp название_приложения


git init - инициализурет локальный репозиторий в текущей паке
git status - проверака текущего состояния репозитория
git add . - добавление всех файлов  в коммит
git add - добавление файла в коммит
git add путь_до_файла - добавление конкретных файлов
есть 2 состояния:
changes to be committed - файлы, которые будут добавляться в версию
untracked changes - файлы которые остаются вне версии
git commit - создание версии (коммита)
git commit -m 'Название коммита-любое'
git push - отправка локальных коммитов в хранилище (на удаленный репозиторий)
git push название_репозитория название_ветки


git remote - команда для работы с удаленным репозиторием
git remote add - привязка удаленного репозитория
git remote add название ссылка_на_репозиторий (который мы копируем в github)
git remote -v  список привязанных удаленных репозиториев
git remote rm название #исключение удаленного репозитория

git branch - работа с ветками
git branch - просмотр всех веток (активная ветка помечается * и другим светом)
git branch название_ветки  -создание новой ветки
git branch -D название_ветки   -удаление ветки
git checkout название_ветки   -переход на ветку
git checkout -b название_ветки -создание ветки и переход на нее


git pull - получение изменений из удаленного репозитория
git pull название_репозитория название_ветки

git stash - прячет изменения
git stash apply - возвращает спрятанные изменения
